//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Input/InputActions_Player_01.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions_Player_01: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions_Player_01()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions_Player_01"",
    ""maps"": [
        {
            ""name"": ""Player_01"",
            ""id"": ""b8061ece-2a33-4a4c-b002-ab3c32e7a876"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""7f90ad87-2027-476f-8d6a-07057d542f58"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Button"",
                    ""id"": ""26c557f1-29b7-4485-a423-d5c977a128c4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""1aaf4db3-5385-4195-9716-caeb2b9bc4e2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Arrows"",
                    ""id"": ""d5b24f16-07da-40d8-bbdf-757687033bb1"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e15300c7-dd4f-4752-8eed-10eda086ffc9"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6501a96b-ff1f-4cec-aaae-824b4d7acfa8"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""280f954c-b4f1-492e-89cb-27aaad07b520"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5b942e65-ccf8-46e1-bd6b-d0ee7aa16bcd"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""aa51c863-cbe0-43c2-acdd-626334bc8072"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ce8d9794-45cd-4c8e-993f-c258a3313f68"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player_02"",
            ""id"": ""989485af-be34-4533-9536-1823fb53c803"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""7d5a47be-18f4-4d3c-88a9-d386d52480e7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Button"",
                    ""id"": ""02bc0101-eaaf-4f76-b623-5ea0b726682a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""71a92baf-7773-4b42-a871-60936b1529ae"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""c065983f-8384-486f-ba06-b243906947c1"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6643c94f-effe-48b0-bcae-780b66dffaf8"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8cd7d357-3476-471b-baae-0f38f32bb4bf"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""880148de-740e-453a-8803-8160afeb53f1"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a667e32b-7301-4ac3-b82a-6ceffcc0226e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""680000a4-df97-446f-9865-756675c3aecc"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ac31811f-a39d-4859-8a05-33b63d6dfc64"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player_01
        m_Player_01 = asset.FindActionMap("Player_01", throwIfNotFound: true);
        m_Player_01_Movement = m_Player_01.FindAction("Movement", throwIfNotFound: true);
        m_Player_01_Rotate = m_Player_01.FindAction("Rotate", throwIfNotFound: true);
        m_Player_01_Confirm = m_Player_01.FindAction("Confirm", throwIfNotFound: true);
        // Player_02
        m_Player_02 = asset.FindActionMap("Player_02", throwIfNotFound: true);
        m_Player_02_Movement = m_Player_02.FindAction("Movement", throwIfNotFound: true);
        m_Player_02_Rotate = m_Player_02.FindAction("Rotate", throwIfNotFound: true);
        m_Player_02_Confirm = m_Player_02.FindAction("Confirm", throwIfNotFound: true);
    }

    ~@InputActions_Player_01()
    {
        UnityEngine.Debug.Assert(!m_Player_01.enabled, "This will cause a leak and performance issues, InputActions_Player_01.Player_01.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Player_02.enabled, "This will cause a leak and performance issues, InputActions_Player_01.Player_02.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player_01
    private readonly InputActionMap m_Player_01;
    private List<IPlayer_01Actions> m_Player_01ActionsCallbackInterfaces = new List<IPlayer_01Actions>();
    private readonly InputAction m_Player_01_Movement;
    private readonly InputAction m_Player_01_Rotate;
    private readonly InputAction m_Player_01_Confirm;
    public struct Player_01Actions
    {
        private @InputActions_Player_01 m_Wrapper;
        public Player_01Actions(@InputActions_Player_01 wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player_01_Movement;
        public InputAction @Rotate => m_Wrapper.m_Player_01_Rotate;
        public InputAction @Confirm => m_Wrapper.m_Player_01_Confirm;
        public InputActionMap Get() { return m_Wrapper.m_Player_01; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player_01Actions set) { return set.Get(); }
        public void AddCallbacks(IPlayer_01Actions instance)
        {
            if (instance == null || m_Wrapper.m_Player_01ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player_01ActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Rotate.started += instance.OnRotate;
            @Rotate.performed += instance.OnRotate;
            @Rotate.canceled += instance.OnRotate;
            @Confirm.started += instance.OnConfirm;
            @Confirm.performed += instance.OnConfirm;
            @Confirm.canceled += instance.OnConfirm;
        }

        private void UnregisterCallbacks(IPlayer_01Actions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Rotate.started -= instance.OnRotate;
            @Rotate.performed -= instance.OnRotate;
            @Rotate.canceled -= instance.OnRotate;
            @Confirm.started -= instance.OnConfirm;
            @Confirm.performed -= instance.OnConfirm;
            @Confirm.canceled -= instance.OnConfirm;
        }

        public void RemoveCallbacks(IPlayer_01Actions instance)
        {
            if (m_Wrapper.m_Player_01ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayer_01Actions instance)
        {
            foreach (var item in m_Wrapper.m_Player_01ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player_01ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Player_01Actions @Player_01 => new Player_01Actions(this);

    // Player_02
    private readonly InputActionMap m_Player_02;
    private List<IPlayer_02Actions> m_Player_02ActionsCallbackInterfaces = new List<IPlayer_02Actions>();
    private readonly InputAction m_Player_02_Movement;
    private readonly InputAction m_Player_02_Rotate;
    private readonly InputAction m_Player_02_Confirm;
    public struct Player_02Actions
    {
        private @InputActions_Player_01 m_Wrapper;
        public Player_02Actions(@InputActions_Player_01 wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player_02_Movement;
        public InputAction @Rotate => m_Wrapper.m_Player_02_Rotate;
        public InputAction @Confirm => m_Wrapper.m_Player_02_Confirm;
        public InputActionMap Get() { return m_Wrapper.m_Player_02; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player_02Actions set) { return set.Get(); }
        public void AddCallbacks(IPlayer_02Actions instance)
        {
            if (instance == null || m_Wrapper.m_Player_02ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player_02ActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Rotate.started += instance.OnRotate;
            @Rotate.performed += instance.OnRotate;
            @Rotate.canceled += instance.OnRotate;
            @Confirm.started += instance.OnConfirm;
            @Confirm.performed += instance.OnConfirm;
            @Confirm.canceled += instance.OnConfirm;
        }

        private void UnregisterCallbacks(IPlayer_02Actions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Rotate.started -= instance.OnRotate;
            @Rotate.performed -= instance.OnRotate;
            @Rotate.canceled -= instance.OnRotate;
            @Confirm.started -= instance.OnConfirm;
            @Confirm.performed -= instance.OnConfirm;
            @Confirm.canceled -= instance.OnConfirm;
        }

        public void RemoveCallbacks(IPlayer_02Actions instance)
        {
            if (m_Wrapper.m_Player_02ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayer_02Actions instance)
        {
            foreach (var item in m_Wrapper.m_Player_02ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player_02ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Player_02Actions @Player_02 => new Player_02Actions(this);
    public interface IPlayer_01Actions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnConfirm(InputAction.CallbackContext context);
    }
    public interface IPlayer_02Actions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnConfirm(InputAction.CallbackContext context);
    }
}
